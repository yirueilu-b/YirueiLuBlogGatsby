{"componentChunkName":"component---src-templates-post-js","path":"/blog/ebb67b","result":{"pageContext":{"md_path":"leetcode485","title":"LeetCode 485. Max Consecutive Ones","description":"Given a binary array, find the maximum number of consecutive 1s in this array.Example 1:\nInput: [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two dig...","image":"https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png","uuid":"ebb67b","text":"# LeetCode 485. Max Consecutive Ones\r\n\r\n![](https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png)\r\n\r\n## Description\r\n\r\nGiven a binary array, find the maximum number of consecutive 1s in this array.\r\n\r\n**Example 1:**\r\n```\r\nInput: [1,1,0,1,1,1]\r\nOutput: 3\r\nExplanation: The first two digits or the last three digits are consecutive 1s.\r\n    The maximum number of consecutive 1s is 3.\r\n```\r\n\r\n**Note:**\r\n- The input array will only contain 0 and 1.\r\n- The length of input array is a positive integer and will not exceed 10,000\r\n\r\n## Idea\r\n\r\nTrivial, just use a for loop to iterate through the `nums` array.\r\n\r\nFirst we keep two variables `ans` and `temp_ones`, `ans` is for recording max consecutive ones and `temp_ones` is for recording current consecutive ones.\r\n\r\nIn the for loop, if the value is equal to 1 then we add `temp_ones` by 1 else clear `temp_ones` as 0\r\n\r\nand in the end of every iteration, we update `ans` by comparing `temp_ones` and `ans` thus keep `ans` as maximum consecutive ones.\r\n\r\n\r\n## Solution\r\n\r\n```python\r\nclass Solution:\r\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\r\n        ans = 0\r\n        temp_ones = 0\r\n        for n in nums:\r\n            if n == 1:\r\n                temp_ones += 1\r\n            else:\r\n                temp_ones = 0\r\n            ans = max(temp_ones, ans)\r\n        return ans\r\n```\r\n> **Complexity**\r\n> - Time complexity: `O(n)`\r\n>   Iterate through `n` given `nums`\r\n> - Space complexity: `O(1)`\r\n>   Only constant variables for keeping number of consecutive ones and max number of consecutive ones\r\n\r\n## Note\r\n\r\n- Visualize the process:\r\n\r\n```python\r\ndef plot_nums(nums, index1, index2, ans):\r\n    length = len(nums)\r\n    height = 1\r\n    plt.figure(figsize=(length,4))\r\n    plt.xlim([-1, length+1])\r\n    plt.ylim([-1.5, 2.5])\r\n    # plot arr\r\n    rect = patches.Rectangle((0, 0), length, height, lw=1, fill=0, ec='steelblue')\r\n    plt.gca().add_patch(rect)\r\n    for i in range(length):\r\n        plt.plot([i, i], [height, 0], c='steelblue', lw=1)\r\n        plt.text(i + 0.5 - 0.08*len(str(i)), 1 + 0.08, i, fontsize=10, color='steelblue')\r\n        plt.text(i + 0.5 - 0.09, 0.5 - 0.09, nums[i], fontsize=14, color='r')\r\n    # plot current ones\r\n    rect = patches.Rectangle((index1+1, 0), -index2, height, lw=1, fc=(0.19607843, 0.80392157, 0.19607843, 0.2))\r\n    plt.gca().add_patch(rect)\r\n    # arrow for index\r\n    if index1 >= 0:\r\n        plt.arrow(index1 + 0.5, 1.8, 0, -0.25, head_width=0.1, color='k')\r\n\r\n    if index1 == -1:\r\n        index1 = 'init'\r\n    plt.title('i = {}\\ncurrent number of ones = {}\\nans = {}'.format(index1, index2, ans))\r\n\r\n    plt.axis('off')\r\n    plt.tight_layout()\r\n    # plt.savefig('{}.jpg'.format(index1))\r\n    plt.show()\r\n\r\nnums = [1,1,0,1,1,0,1,1,1]\r\nans = 0\r\ntemp_ones = 0\r\nplot_nums(nums, -1, temp_ones, ans)\r\nfor i, n in enumerate(nums):\r\n    if n == 1:\r\n        temp_ones += 1\r\n    else:\r\n        temp_ones = 0\r\n    ans = max(temp_ones, ans)\r\n    plot_nums(nums, i, temp_ones, ans)\r\n```\r\n\r\n![](https://github.com/yirueilu-b/coding-problems-and-notes/raw/master/leetcode/arrays101/max_consecutive_ones.gif)\r\n\r\n###### tags: `Coding`"}},"staticQueryHashes":[]}