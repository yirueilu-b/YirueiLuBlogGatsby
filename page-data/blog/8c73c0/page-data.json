{"componentChunkName":"component---src-templates-post-js","path":"/blog/8c73c0","result":{"pageContext":{"md_path":"leetcode121","title":"LeetCode 121. Best Time to Buy and Sell Stock","description":"Say you have an array for which the ith element is the price of a given stock on day i.If you were only permitted to complete at most one transaction ...","image":"https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png","uuid":"8c73c0","text":"# LeetCode 121. Best Time to Buy and Sell Stock\r\n\r\n![](https://dkmonster.github.io/assets/images/leetcode/LeetCode_Sharing.png)\r\n\r\n## Description\r\n\r\nSay you have an array for which the ith element is the price of a given stock on day i.\r\n\r\nIf you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.\r\n\r\nNote that you cannot sell a stock before you buy one.\r\n\r\n**Example 1:**\r\n\r\n```\r\nInput: [7,1,5,3,6,4]\r\nOutput: 5\r\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\r\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\r\n```             \r\n\r\n**Example 2:**\r\n\r\n```\r\nInput: [7,6,4,3,1]\r\nOutput: 0\r\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\r\n```\r\n\r\n## Idea\r\n\r\n**Idea 1**\r\n\r\nBrute-force, find all pair and return the pair which makes the profit maximal\r\n\r\n**Idea 2**\r\n\r\nTry to find the optimal substructure and overlapping sub-problems and use dynamic programming. \r\n\r\n```\r\nmax_profit_sell_on_day_0 = 0\r\n\r\ni=1\r\n[7] 1\r\nmax profit sell on day 1:\r\nmax(max_profit_sell_on_day_0 + prices[1] - prices[0], prices[1] - prices[0]) = 0\r\nmax(-6 + (-6), 0) = -6\r\n\r\ni=2\r\n[7,1] 5\r\nmax profit sell on day 2 is \r\nmax(max_profit_sell_on_day_1 + prices[2] - prices[1], prices[2] - prices[1])\r\nmax(-6 + 4, 4) = 4\r\n\r\ni=3\r\n[7,1,5] 3\r\nmax profit sell on day 3 is \r\nmax(max_profit_sell_on_day_2 + prices[3] - prices[2], prices[3] - prices[2]) = 0\r\nmax(4 + (-2), -2) = 2\r\n\r\ni=4\r\n[7,1,5,3] 6 \r\nmax profit sell on day 4 is \r\nmax(max_profit_sell_on_day_3 + prices[4] - prices[3], max_profit_on_day) = 0\r\nmax(2 + 3, 3) = 5\r\n\r\ni=5\r\n[7,1,5,3,6] 4\r\nmax profit sell on day 5 is \r\nmax(max_profit_sell_on_day_4 + prices[5] - prices[4], max_profit_on_day) = 0\r\nmax(5 + (-2), -2) = 3\r\n```\r\n\r\n## Solution\r\n\r\n**Solution 1 ( TLE )**\r\n```python\r\nclass Solution:\r\n    def maxProfit(self, prices: List[int]) -> int:\r\n        max_profit = 0\r\n        for i in range(len(prices)-1):\r\n            for j in range(i+1, len(prices)):\r\n                max_profit = max(max_profit, prices[j] - prices[i])\r\n        return max_profit\r\n```\r\n> **Complexity**\r\n> - Time complexity: `O(n^2)`     \r\n>   For every price on day `i`, we need to calculate for `i+1` to `n` prices\r\n>   and `i = 0 to n-1` so the cost in total is `n + (n-1) + ... + 1 -> O(n^2)`\r\n> - Space complexity: `O(1)`     \r\n>   Trivial\r\n>   \r\n**Solution 2**\r\n```python\r\nclass Solution:\r\n    def maxProfit(self, prices: List[int]) -> int:\r\n        max_profit, dp = 0, 0\r\n        for i in range(0, len(prices) - 1):\r\n            profit_day_i = prices[i+1] - prices[i]\r\n            dp = max(dp + profit_day_i, profit_day_i)\r\n            max_profit = max(max_profit, dp)\r\n        return max_profit\r\n```\r\n> **Complexity**\r\n> - Time complexity: `O(n)`     \r\n>   Iterate through the prices\r\n> - Space complexity: `O(1)`     \r\n>   Trivial\r\n\r\n## Note\r\n\r\nVisualize Idea 2:\r\n\r\n```python\r\nprices = [7,1,5,3,6,4]\r\ndays = range(len(prices))\r\nplt.figure(figsize=(16, 8))\r\nans, dp = 0, 0\r\nbuy_at = 0\r\nsell_at = 0\r\nfor i in range(0, len(prices)-1):\r\n    q = prices[i+1] - prices[i]\r\n    if dp + q <= q:\r\n        buy_at = i\r\n    sell_at = i+1\r\n    dp = max(dp + q, q)    \r\n    ans = max(ans, dp)\r\n    plt.subplot(2, 3, i+1)\r\n    plt.title(\"day\" + str(i+2))\r\n    # Draw prices\r\n    plt.plot(days[:i+2], prices[:i+2], '-o')\r\n    # Current price\r\n    plt.scatter(days[i+1], prices[i+1], c='r', s=150)\r\n    # Difference on day i\r\n    plt.plot([days[i]-0.5, days[i+1]+0.5], [prices[i],]*2, '--', c='darkorange', label='immediately', linewidth=3)\r\n    plt.plot([days[i]-0.5, days[i+1]+0.5], [prices[i+1],]*2, '--', c='darkorange', linewidth=3)\r\n    # Best buy and current sell\r\n    plt.plot(range(-1, 7), [prices[buy_at],]*8, '-', c='g', label='Best buy', alpha=0.5)\r\n    plt.plot(range(-1, 7), [prices[sell_at],]*8, '-', c='r', label='Sell', alpha=0.5)    \r\n    \r\n    plt.legend(loc=\"lower right\")\r\n    plt.axis([-1, 6, 0, 8])\r\n    plt.grid()\r\nplt.show()\r\n```\r\n\r\n![](https://i.imgur.com/bHGdLFw.png)\r\n\r\n\r\n###### tags: `Coding`"}},"staticQueryHashes":[]}