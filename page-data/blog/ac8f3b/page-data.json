{"componentChunkName":"component---src-templates-post-js","path":"/blog/ac8f3b","result":{"pageContext":{"md_path":"opencvPython","title":"Basic Operations in OpenCV-Python","description":"Take a note of some basic and common operations in OpenCV-Python. I also write the note in Jupyter notebook and the code is at here. OpenCV is one of ","image":"https://i.imgur.com/INQBQvX.png","uuid":"ac8f3b","text":"# Basic Operations in OpenCV-Python\r\n\r\nTake a note of some basic and common operations in OpenCV-Python. I also write the note in Jupyter notebook and the code is at [here](https://). OpenCV is one of the most popular library. It includes hundreds of computer vision algorithms and its speed is relatively higher than other libraries such as Pillow and scikit-image in Python.\r\n\r\n## Environment\r\n\r\n- Windows 10\r\n- Python 3.6.8\r\n- jupyter 1.0.0\r\n- opencv-python 4.4.0.42\r\n\r\n## Read Image\r\n\r\n**Function**\r\n\r\n```python\r\ncv2.imread(filename, flag)\r\n```\r\n> `flag`: the way image to be read\r\n> - `cv2.IMREAD_COLOR`: default value, could pass int 1 intead the string, read image in BGR ( 3 channel )\r\n> - `cv2.IMREAD_GRAYSCALE`: could pass int 0 intead the string, read image in grayscale ( 1 channel )\r\n> - `cv2.IMREAD_UNCHANGED`: could pass int -1 intead the string, read image in BRGA mode ( 4 channel )\r\n\r\n**Example**\r\n\r\n```python\r\n# read with different flags\r\nimage = cv2.imread(IMAGE_PATH)\r\nimage_bgr = cv2.imread(IMAGE_PATH, 1)\r\nimage_gray = cv2.imread(IMAGE_PATH, 0)\r\nimage_bgra = cv2.imread(IMAGE_PATH, -1)\r\n# show the images and shape of images\r\n# OpenCV-Python read image in HWC ( Height, Width, Channel ) format\r\n\r\n# Matplotlib show images with RGB color \r\n# therefore the image seems strange before converting color space\r\nplt.figure(figsize=(8, 7))\r\nplt.subplot(221)\r\nplt.title((\"shape of image: %s\" % (image.shape, )))\r\nplt.imshow(image)\r\nplt.subplot(222)\r\nplt.title((\"shape of image_bgr: %s\" % (image_bgr.shape, )))\r\nplt.imshow(image_bgr)\r\nplt.subplot(223)\r\nplt.title((\"shape of image_gray: %s\" % (image_gray.shape, )))\r\nplt.imshow(image_gray, cmap='gray')\r\nplt.subplot(224)\r\nplt.title((\"shape of image_bgra: %s\" % (image_bgra.shape, )))\r\nplt.imshow(image_bgra)\r\nplt.tight_layout()\r\nplt.show()\r\n```\r\n![](https://i.imgur.com/INQBQvX.png)\r\n\r\n\r\n## Write Image\r\n\r\n**Function**\r\n\r\n```python\r\ncv2.imwrite(filename, image)\r\n```\r\n\r\n**Example**\r\n\r\n```python\r\n# write the image to the OUTPUT_PATH then read it\r\ncv2.imwrite(OUTPUT_PATH, image)\r\noutput_image = cv2.imread(OUTPUT_PATH)\r\n# show the image\r\nplt.figure(figsize=(6, 6))\r\nplt.imshow(output_image)\r\nplt.show()\r\n```\r\n![](https://i.imgur.com/foia96R.png)\r\n\r\n\r\n## Convert Color Space of Image\r\n\r\n**Function**\r\n\r\n```python\r\ncv2.cvtColor(input_image, flag)\r\n```\r\n> `flag`: the type of conversion\r\n> - `cv2.COLOR_BGR2HSV`\r\n> - `cv2.COLOR_BGR2GRAY`\r\n> - ...\r\n\r\n> There are 274 types of conversion in total, we could check the types with the code below.\r\n> ```python\r\n> flags = [i for i in dir(cv2) if i.startswith('COLOR_')]\r\n> [print(flag) for flag in flags[:5]]\r\n> print('...')\r\n> print(\"There are %s types in total\" % len(flags))\r\n> ```\r\n> ```\r\n> COLOR_BAYER_BG2BGR\r\n> COLOR_BAYER_BG2BGRA\r\n> COLOR_BAYER_BG2BGR_EA\r\n> COLOR_BAYER_BG2BGR_VNG\r\n> COLOR_BAYER_BG2GRAY\r\n> ...\r\n> There are 274 types in total\r\n> ```\r\n\r\n**Example**\r\n\r\n```python\r\nimage = cv2.imread(IMAGE_PATH)\r\nimage_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\r\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\nimage_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\r\n\r\nplt.figure(figsize=(8, 7))\r\nplt.subplot(221)\r\nplt.title(\"Default BGR\")\r\nplt.imshow(image)\r\nplt.subplot(222)\r\nplt.title(\"RGB\")\r\nplt.imshow(image_rgb)\r\nplt.subplot(223)\r\nplt.title(\"Gray\")\r\nplt.imshow(image_gray, cmap='gray')\r\nplt.subplot(224)\r\nplt.title(\"HSV\")\r\nplt.imshow(image_hsv)\r\nplt.tight_layout()\r\nplt.show()\r\n```\r\n![](https://i.imgur.com/1OeNmav.png)\r\n\r\n> Since the image is just a numpy array, we could just manipulate the array like the code below to convert image between BGR and RGB\r\n> ```python\r\n> # reverse the order of channel, i.e. [B, G, R] to [R, G, B]\r\n> image = image[:,:,::-1]\r\n> ```\r\n\r\n## Resize\r\n\r\n**Function**\r\n\r\n```python\r\ncv2.resize(img, None, fx, fy, interpolation)\r\n# or\r\ncv2.resize(img, (width, height), interpolation)\r\n```\r\n\r\n> `fx`: scale factor along the horizontal axis\r\n> `fy`: scale factor along the vertical axis\r\n> `interpolation`: \r\n> - `INTER_NEAREST`\r\n> - `INTER_LINEAR`\r\n> - `INTER_AREA`\r\n> - `INTER_CUBIC`\r\n> - `INTER_LANCZOS4`\r\n\r\n**Example**\r\n\r\n```python\r\nimage = cv2.imread(IMAGE_PATH)[:,:,::-1]\r\nheight, width = image.shape[:2]\r\nimage_enlarge = cv2.resize(image, None, fx=2.1, fy=2.1, interpolation=cv2.INTER_NEAREST)\r\nimage_2x = cv2.resize(image, (width*2, height*2), cv2.INTER_LINEAR)\r\nimage_new_ratio = cv2.resize(image, (width*3, height*2), cv2.INTER_CUBIC)\r\n\r\nplt.figure(figsize=(8, 7))\r\nplt.subplot(221)\r\nplt.title((\"shape of image: %s\" % (image.shape, )))\r\nplt.imshow(image)\r\nplt.subplot(222)\r\nplt.title((\"shape of image_enlarge: %s\" % (image_enlarge.shape, )))\r\nplt.imshow(image_enlarge)\r\nplt.subplot(223)\r\nplt.title((\"shape of image_2x: %s\" % (image_2x.shape, )))\r\nplt.imshow(image_2x)\r\nplt.subplot(224)\r\nplt.title((\"shape of image_new_ratio: %s\" % (image_new_ratio.shape, )))\r\nplt.imshow(image_new_ratio)\r\nplt.tight_layout()\r\nplt.show()\r\n```\r\n![](https://i.imgur.com/yTwEUT2.png)\r\n\r\n> To Be Continued...\r\n\r\n###### tags: `Coding`"}},"staticQueryHashes":[]}